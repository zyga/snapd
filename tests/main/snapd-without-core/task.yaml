summary: Ensure the snapd works without core on classic systems

details: |
    Historically the ubuntu-core system defined the core snapd as a bootable
    rootfs that contains basic system utilities and snapd in one big snap. As
    additional Ubuntu LTS releases were made, corresponding core snaps got
    created causing a problem with the assumption that snapd is in the core snap
    and only there. This was even more problematic on classic systems that did
    not use the core snap for any of the booting functionality, and instead it
    was merely the initial root file system for the running snap applications,
    as it would create pressure to keep updating core with ancient libraries so
    that snapd may be updated alongside. In consequence snapd was split to a
    separate snap and core no longer became mandatory.

    The test installs snapd from the classic package, installs a snap that
    depends on core18 and ensures that snapd is operated from the snapd snap.

# Run only on ubuntu classic because this re-execs.  We have a
# separate test for UC18 already and on UC16 we always have a core
# snap so we don't need to test there.
systems: [ubuntu-1*, ubuntu-2*]

environment:
    # uploading large snap triggers OOM
    SNAPD_NO_MEMORY_LIMIT: 1

restore: |
    rm -f /tmp/snapd_*.snap

execute: |
    if [ "${SNAP_REEXEC:-}" = "0" ]; then
        echo "skipping test when SNAP_REEXEC is disabled"
        exit 0
    fi

    echo "Create modified snapd snap"
    #shellcheck source=tests/lib/prepare.sh
    . "$TESTSLIB"/prepare.sh
    snap download --edge snapd
    repack_snapd_snap_with_deb_content /tmp

    echo "Ensure core is gone so that we can have snapd"
    #shellcheck source=tests/lib/pkgdb.sh
    . "$TESTSLIB"/pkgdb.sh
    distro_purge_package snapd
    distro_install_build_snapd

    echo "Install the snapd snap"
    snap set core experimental.snapd-snap=true
    snap install --dangerous /tmp/snapd_*.snap
    echo "Ensure we restarted into the snapd snap"
    "$TESTSTOOLS"/journal-state match-log  'restarting into "/snap/snapd/'

    echo "Now install a core18 based snap and ensure it works"
    snap install test-snapd-sh-core18
    test-snapd-sh-core18.sh -c 'echo hello' | MATCH hello
    echo "No core was installed"
    snap list | not grep ^"core "

    echo "Ensure we re-exec to the snapd snap"
    SNAPD_DEBUG=1 test-snapd-sh-core18.sh -c 'true' 2>&1 | MATCH 'restarting into "/snap/snapd/current'
